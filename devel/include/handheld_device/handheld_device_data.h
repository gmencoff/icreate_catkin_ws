// Generated by gencpp from file handheld_device/handheld_device_data.msg
// DO NOT EDIT!


#ifndef HANDHELD_DEVICE_MESSAGE_HANDHELD_DEVICE_DATA_H
#define HANDHELD_DEVICE_MESSAGE_HANDHELD_DEVICE_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Accel.h>

namespace handheld_device
{
template <class ContainerAllocator>
struct handheld_device_data_
{
  typedef handheld_device_data_<ContainerAllocator> Type;

  handheld_device_data_()
    : device_distance(0)
    , device_quat()
    , device_accel()
    , device_switch(0)  {
    }
  handheld_device_data_(const ContainerAllocator& _alloc)
    : device_distance(0)
    , device_quat(_alloc)
    , device_accel(_alloc)
    , device_switch(0)  {
  (void)_alloc;
    }



   typedef int64_t _device_distance_type;
  _device_distance_type device_distance;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _device_quat_type;
  _device_quat_type device_quat;

   typedef  ::geometry_msgs::Accel_<ContainerAllocator>  _device_accel_type;
  _device_accel_type device_accel;

   typedef int64_t _device_switch_type;
  _device_switch_type device_switch;





  typedef boost::shared_ptr< ::handheld_device::handheld_device_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::handheld_device::handheld_device_data_<ContainerAllocator> const> ConstPtr;

}; // struct handheld_device_data_

typedef ::handheld_device::handheld_device_data_<std::allocator<void> > handheld_device_data;

typedef boost::shared_ptr< ::handheld_device::handheld_device_data > handheld_device_dataPtr;
typedef boost::shared_ptr< ::handheld_device::handheld_device_data const> handheld_device_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::handheld_device::handheld_device_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::handheld_device::handheld_device_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace handheld_device

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'handheld_device': ['/home/georgemencoff/catkin_ws/src/handheld_device/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::handheld_device::handheld_device_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::handheld_device::handheld_device_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handheld_device::handheld_device_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handheld_device::handheld_device_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handheld_device::handheld_device_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handheld_device::handheld_device_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::handheld_device::handheld_device_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "894e9b259d1d4e8448e9e2d9ffed9851";
  }

  static const char* value(const ::handheld_device::handheld_device_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x894e9b259d1d4e84ULL;
  static const uint64_t static_value2 = 0x48e9e2d9ffed9851ULL;
};

template<class ContainerAllocator>
struct DataType< ::handheld_device::handheld_device_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "handheld_device/handheld_device_data";
  }

  static const char* value(const ::handheld_device::handheld_device_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::handheld_device::handheld_device_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 device_distance\n\
geometry_msgs/Quaternion device_quat\n\
geometry_msgs/Accel device_accel\n\
int64 device_switch\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Accel\n\
# This expresses acceleration in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::handheld_device::handheld_device_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::handheld_device::handheld_device_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.device_distance);
      stream.next(m.device_quat);
      stream.next(m.device_accel);
      stream.next(m.device_switch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct handheld_device_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::handheld_device::handheld_device_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::handheld_device::handheld_device_data_<ContainerAllocator>& v)
  {
    s << indent << "device_distance: ";
    Printer<int64_t>::stream(s, indent + "  ", v.device_distance);
    s << indent << "device_quat: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.device_quat);
    s << indent << "device_accel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Accel_<ContainerAllocator> >::stream(s, indent + "  ", v.device_accel);
    s << indent << "device_switch: ";
    Printer<int64_t>::stream(s, indent + "  ", v.device_switch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HANDHELD_DEVICE_MESSAGE_HANDHELD_DEVICE_DATA_H
