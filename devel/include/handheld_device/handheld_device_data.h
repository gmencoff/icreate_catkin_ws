// Generated by gencpp from file handheld_device/handheld_device_data.msg
// DO NOT EDIT!


#ifndef HANDHELD_DEVICE_MESSAGE_HANDHELD_DEVICE_DATA_H
#define HANDHELD_DEVICE_MESSAGE_HANDHELD_DEVICE_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace handheld_device
{
template <class ContainerAllocator>
struct handheld_device_data_
{
  typedef handheld_device_data_<ContainerAllocator> Type;

  handheld_device_data_()
    : device_distance(0)
    , quatx(0.0)
    , quaty(0.0)
    , quatz(0.0)
    , quatw(0.0)
    , accelx(0.0)
    , accely(0.0)
    , accelz(0.0)
    , device_switch(0)  {
    }
  handheld_device_data_(const ContainerAllocator& _alloc)
    : device_distance(0)
    , quatx(0.0)
    , quaty(0.0)
    , quatz(0.0)
    , quatw(0.0)
    , accelx(0.0)
    , accely(0.0)
    , accelz(0.0)
    , device_switch(0)  {
  (void)_alloc;
    }



   typedef int16_t _device_distance_type;
  _device_distance_type device_distance;

   typedef float _quatx_type;
  _quatx_type quatx;

   typedef float _quaty_type;
  _quaty_type quaty;

   typedef float _quatz_type;
  _quatz_type quatz;

   typedef float _quatw_type;
  _quatw_type quatw;

   typedef float _accelx_type;
  _accelx_type accelx;

   typedef float _accely_type;
  _accely_type accely;

   typedef float _accelz_type;
  _accelz_type accelz;

   typedef int8_t _device_switch_type;
  _device_switch_type device_switch;





  typedef boost::shared_ptr< ::handheld_device::handheld_device_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::handheld_device::handheld_device_data_<ContainerAllocator> const> ConstPtr;

}; // struct handheld_device_data_

typedef ::handheld_device::handheld_device_data_<std::allocator<void> > handheld_device_data;

typedef boost::shared_ptr< ::handheld_device::handheld_device_data > handheld_device_dataPtr;
typedef boost::shared_ptr< ::handheld_device::handheld_device_data const> handheld_device_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::handheld_device::handheld_device_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::handheld_device::handheld_device_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace handheld_device

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'handheld_device': ['/home/georgemencoff/catkin_ws/src/handheld_device/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::handheld_device::handheld_device_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::handheld_device::handheld_device_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handheld_device::handheld_device_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handheld_device::handheld_device_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handheld_device::handheld_device_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handheld_device::handheld_device_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::handheld_device::handheld_device_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f3fc4e797e13ce34dcd40452711b663";
  }

  static const char* value(const ::handheld_device::handheld_device_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f3fc4e797e13ce3ULL;
  static const uint64_t static_value2 = 0x4dcd40452711b663ULL;
};

template<class ContainerAllocator>
struct DataType< ::handheld_device::handheld_device_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "handheld_device/handheld_device_data";
  }

  static const char* value(const ::handheld_device::handheld_device_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::handheld_device::handheld_device_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 device_distance\n\
float32 quatx\n\
float32 quaty\n\
float32 quatz\n\
float32 quatw\n\
float32 accelx\n\
float32 accely\n\
float32 accelz\n\
int8 device_switch\n\
";
  }

  static const char* value(const ::handheld_device::handheld_device_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::handheld_device::handheld_device_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.device_distance);
      stream.next(m.quatx);
      stream.next(m.quaty);
      stream.next(m.quatz);
      stream.next(m.quatw);
      stream.next(m.accelx);
      stream.next(m.accely);
      stream.next(m.accelz);
      stream.next(m.device_switch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct handheld_device_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::handheld_device::handheld_device_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::handheld_device::handheld_device_data_<ContainerAllocator>& v)
  {
    s << indent << "device_distance: ";
    Printer<int16_t>::stream(s, indent + "  ", v.device_distance);
    s << indent << "quatx: ";
    Printer<float>::stream(s, indent + "  ", v.quatx);
    s << indent << "quaty: ";
    Printer<float>::stream(s, indent + "  ", v.quaty);
    s << indent << "quatz: ";
    Printer<float>::stream(s, indent + "  ", v.quatz);
    s << indent << "quatw: ";
    Printer<float>::stream(s, indent + "  ", v.quatw);
    s << indent << "accelx: ";
    Printer<float>::stream(s, indent + "  ", v.accelx);
    s << indent << "accely: ";
    Printer<float>::stream(s, indent + "  ", v.accely);
    s << indent << "accelz: ";
    Printer<float>::stream(s, indent + "  ", v.accelz);
    s << indent << "device_switch: ";
    Printer<int8_t>::stream(s, indent + "  ", v.device_switch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HANDHELD_DEVICE_MESSAGE_HANDHELD_DEVICE_DATA_H
